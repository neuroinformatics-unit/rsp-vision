import logging
import os

from path import Path

from .parsers.chryssanthi import ChryssanthiParser
from .read_config import read
from .utils import can_ping_swc_server, is_winstor_mounted


class FolderNamingSpecs:
    """The class :class:`FileNamingSpecs` represents the naming convention
    of the files and folders in which the experimental data is stored.
    It is used to parse the folder name and extract the information about
    the mouse line, mouse id, hemisphere, brain region, monitor position,
    fov and cre line. It also checks if the file exists in the specified
    path. In case it does not exist, it raises a FileNotFoundError.

    :param folder_name: name of the folder containing the experimental
    data generated by suite2p and registers2p
    :type folder_name: str
    :param config: dictionary containing the configuration parameters
    read from the config file
    :type config: dict
    :param mouse_line: name of the mouse line (e.g. 'CX')
    :type mouse_line: str
    :param mouse_id: id of the mouse (e.g. '95_2')
    :type mouse_id: str
    :param hemisphere: hemisphere of the brain (e.g. 'hL')
    :type hemisphere: str
    :param brain_region: brain region (e.g. 'V1')
    :type brain_region: str
    :param monitor_position: position of the monitor (e.g. 'monitor_front')
    :type monitor_position: str
    :param fov: field of view (e.g. 'FOV3c')
    :type fov: str
    :param cre: cre line (e.g. 'cre-off')
    :type cre: str
    """

    def __init__(
        self,
        folder_name: str,
    ):
        """Conbstructor method

        :param folder_name: name of the folder containing the experimental
        data generated by suite2p and registers2p
        :type folder_name: str
        :raises FileNotFoundError: if the experiment folder does not exist
        """
        if not can_ping_swc_server():
            logging.debug("Please connect to the VPN.")
            raise RuntimeError("Please connect to the VPN.")
        if not is_winstor_mounted():
            logging.debug("Please mount Winstor.")
            raise RuntimeError("Please mount Winstor.")

        self.folder_name = folder_name

        logging.info("Reading configurations")
        self.config = read()

        logging.info("Parsing folder name")
        self.parse_name()

        if not self.check_if_file_exists():
            logging.debug(f"File {self.get_path()} does not exist")
            raise FileNotFoundError(
                f"File {self.folder_name} not found. "
                + "Please check the file name and try again."
            )

    def parse_name(self) -> None:
        """Parses the folder name and evaluates the parameters `mouse_line`,
        `mouse_id`, `hemisphere`, `brain_region`, `monitor_position.
        Other parameters might be parsed depending on the project.

        :raises ValueError: if the parser specified in the config file is
        not implemented
        """
        if self.config["scientist"] == "Chryssanthi":
            logging.debug("Parsing folder name using Chryssanthi's parser")
            self._parser = ChryssanthiParser(self.folder_name)

        if not hasattr(self, "_parser"):
            logging.debug(
                f"Scientist's parser {self.config['scientist']} \
                not supported"
            )
            raise ValueError(
                f"Scientist's parser {self.config['scientist']} \
                not supported"
            )

        for attribute in self._parser.__dict__:
            if not attribute.startswith("_"):
                logging.debug(
                    f"Setting attribute {attribute} in the class \
                    FolderNamingSpecs"
                )
                setattr(self, attribute, getattr(self._parser, attribute))

    def get_path(self) -> Path:
        """Returns the path to the folder containing the experimental data.
        Reads the server location from the config file and appends the
        parent folder and the given folder name.
        """
        return self._parser.get_path()

    def check_if_file_exists(self) -> bool:
        """Checks if the folder containing the experimental data exists.
        The folder path is obtained by calling the method :meth:`get_path`.
        """
        return os.path.exists(self.get_path())


class FormattedData:
    """Class to load the formatted data from suite2p and registers2p."""

    def __init__(
        self,
        file_name: str,
    ):
        self.file_name = file_name
        self.file_specs = self.get_FileNamingSpecs()

    def get_FileNamingSpecs(self) -> FolderNamingSpecs:
        return FolderNamingSpecs(self.file_name)
