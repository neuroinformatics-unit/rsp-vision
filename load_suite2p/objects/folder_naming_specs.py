import logging
import os
from pathlib import Path

from .parsers.parser2pRSP import Parser2pRSP


class FolderNamingSpecs:
    """The class :class:`FolderNamingSpecs` represents the naming convention
    of the files and folders in which the experimental data is stored.

    Attributes
    ----------
    folder_name : str
        Name of the folder containing the experimental
        data generated by suite2p and registers2p

    config: dict
        Dictionary containing the configuration parameters

    mouse_line : str
        Name of the mouse line (e.g. 'CX')

    mouse_id : str
        Mouse id (e.g. '95_2')

    hemisphere : str
        Hemisphere of the brain (e.g. 'hL')

    brain_region : str
        Brain region (e.g. 'V1')

    monitor_position : str
        Monitor position (e.g. 'monitor_front')

    fov : str, optional
        Field of view (e.g. 'fov1')

    cre : str, optional
        Cre line (e.g. 'Sst-IRES-Cre')
    """

    def __init__(
        self,
        folder_name: str,
        config: dict,
    ):
        self.original_config = config

        self.folder_name = folder_name

        logging.info(f"Parsing folder name: {folder_name}")
        self.parse_name()
        self.mouse_line = self._parser.info["mouse_line"]
        self.mouse_id = self._parser.info["mouse_id"]
        self.hemisphere = self._parser.info["hemisphere"]
        self.brain_region = self._parser.info["brain_region"]
        self.monitor_position = self._parser.info["monitor_position"]

        try:
            self.fov = self._parser.info["fov"]
        except KeyError:
            self.fov = None

        try:
            self.cre = self._parser.info["cre"]
        except KeyError:
            self.cre = None

        if not self.check_if_file_exists():
            logging.error(f"File {self.get_path()} does not exist")
            raise FileNotFoundError(
                f"File {self.folder_name} not found. "
                + "Please check the file name and try again."
            )

    def parse_name(self) -> None:
        """Parses the folder name and evaluates the parameters `mouse_line`,
        `mouse_id`, `hemisphere`, `brain_region`, `monitor_position.
        Other parameters might be parsed depending on the project.

        Raises
        ------
        ValueError
            if the parser specified in the config file is
        not implemented
        """

        if self.original_config["parser"] == "Parser2pRSP":
            logging.debug("Parsing folder name using Parser2pRSP")
            self._parser = Parser2pRSP(self.folder_name, self.original_config)
        else:
            logging.debug(
                f"Parser {self.original_config['parser']} \
                not supported"
            )
            raise ValueError(
                f"Parser {self.original_config['parser']} \
                not supported"
            )

    def get_path(self) -> Path:
        """Returns the path to the folder containing the experimental data.
        Reads the server location from the config file and appends the
        parent folder and the given folder name.

        Returns
        -------
        Path
            path to the folder containing the experimental data
        """
        return self._parser.get_path()

    def get_path_to_allen_dff_file(self) -> Path:
        """Returns the path to the folder containing the allen dff files.
        Reads the server location from the config file and appends the
        parent folder and the given folder name.

        Returns
        -------
        Path
            path to the folder containing the allen dff files
        """
        return self._parser.get_path_to_allen_dff_file()

    def get_path_to_serial2p(self) -> Path:
        """Returns the path to the folder containing the allen roi files.
        Reads the server location from the config file and appends the
        parent folder and the given folder name.

        Returns
        -------
        Path
            path to the folder containing the allen roi files
        """
        return self._parser.get_path_to_serial2p()

    def check_if_file_exists(self) -> bool:
        """Checks if the folder containing the experimental data exists.
        The folder path is obtained by calling the method :meth:`get_path`.

        Returns
        -------
        bool
            True if folder exists, False otherwise
        """
        return os.path.exists(self.get_path())

    def extract_all_file_names(self) -> list:
        """Recursively searches files in the given folder.
        It also locates the allen_dff file and the serial2p files.

        Raises:
            FileNotFoundError: if the allen_dff is not present
            FileNotFoundError: if the serial2p folder is not present

        Returns:
            list: of :class:`File` containing all read files with
            their path and extension.
        """
        logging.info("Extracting all file names")

        all_files = []

        def walk(path):
            for dirpath, _, filenames in os.walk(path):
                all_files.extend(
                    File(name, Path(os.path.join(dirpath, name)))
                    for name in filenames
                )

        walk(self.get_path())

        if os.path.exists(self.get_path_to_allen_dff_file()):
            all_files.append(
                File(
                    name=str(self.get_path_to_allen_dff_file()).split("/")[-1],
                    path=self.get_path_to_allen_dff_file(),
                )
            )
        else:
            logging.info("No allen dff file found")
            raise FileNotFoundError(
                "No allen dff file found. Is this path correct: "
                + f"{self.get_path_to_allen_dff_file()}?"
            )

        if os.path.exists(self.get_path_to_serial2p()):
            walk(self.get_path_to_serial2p())
        else:
            logging.info("No serial2p folder found")
            raise FileNotFoundError(
                "No serial2p folder found. Is this path correct: "
                + f"{self.get_path_to_serial2p()}?"
            )

        for file in all_files:
            logging.info(
                f"Filename found and stored: {file.name}, "
                + f"its path is {file.path}"
            )

        return all_files


class File:
    """Class containing the name of the file, its path and its
        extension.

    Attributes
    ----------
    name: str
        file name

    path: Path
        complete file path

    extension: str
        file extension
    """

    def __init__(self, name: str, path: Path):
        self.name = name
        self.path = path
        self.extension = name.split(".")[-1]
